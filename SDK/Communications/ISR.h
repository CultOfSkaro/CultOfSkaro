/**
\unit
\author Barrett Edwards

FILE:				ISR.h
AUTHOR:				Barrett Edwards
CREATED:			26 Sep 2006
PLATFORM:			Helios Computing Platform
FRAMEWORK:			Communication Framework
COMPANION FILES:	ISR.c
DESCRIPTION:		

	The ISR is a collection of functions related to interrupt handling. There
	are three main types of interrupts handled by this module:
	-# System Timer Interrupt
	-# Communication Interrupts
	-# PCore Interrupts

	The #System Timer Interrupt# is a programmable interrupt time that is 
	currently configured to assert every 1 millisecond. This is different
	from the standard 10 ms timer that is pretty common on linux and windows
	systems. The reason that this is configured to assert so frequently is 
	the benefit of having a 1 millisecond resolution on time calculations.
	The system timer also is used to control how often we service the uart
	cores, which is every 1 ms.

	The #Communications Interrupts# are used to signal when incomming data 
	has arrived and needs servicing or when an outgoing transmission has 
	completed. The uart cores used to be connected like this, but their 
	interrupt lines have been unhooked and they are now serviced on a reqular
	time interval using the 1 ms Timer interrupt.

	The #PCore Interrupts# ISRs are intended to handle a spirious event 
	generated by the pcore. For example, when the plb_correlator core has 
	completed correlating all the features passed to it, the pcore will assert
	an interrupt to inform the PowerPC that the pcore has finished the 
	opperation. ISR_Correlator() is this type of function.

	
	In the following list, the 'ISRs' are called as a result of an interrupt,
	and the Handlers are called from the main while(1) loop.

	Related Functions & Groups 
	- Init
		- void ISR_Init();
	- ISRs
		- void ISR_Timer(void *ptr);
		- void ISR_Serial();
		- void ISR_Wireless();
		- void ISR_TTL();
		- void ISR_USB();
		- void ISR_Correlator();
	- Handlers 
		- void ISR_HandleAll();
		- void ISR_Handler(ISRInfo *info);

CHANGE LOG
- 01 Aug 2007 BBE Added Doxygen style comments

*/ 

/* Conditional Inclusion ----------------------------------------------------*/
#ifndef ISR_H
#define ISR_H


/* Includes -----------------------------------------------------------------*/
/* Macros -------------------------------------------------------------------*/

/** \brief	Maximum array size in bytes for temprary storage of incomming 
			communication data
 */
#define ISR_BUFFER_SIZE		0x4000 


/* Enumerations -------------------------------------------------------------*/
/* Structs ------------------------------------------------------------------*/
/** Container for an incomming communication receive buffer
	This struct contains a pointer to memory where incomming communication data
	should be stored until it is processed.

	Each time a byte is received over a communication channel it should be 
	copied into the ISRInfo::buffer array and then increment the current index,
	which is the ISRInfo::index field.

	Example: 
	\pre
	ISRInfo info;
	uint8 val = GetDataFromUART();
	info.buffer[info.index] = val;
	info.index++
	...
	\endpre
*/
struct ISRInfo
{
	uint8 *buffer;	///< Pointer to allocated memory space (ISR_BUFFER_SIZE) 
	uint32 index;	///< Current number of bytes in the communication buffer
};
typedef struct ISRInfo ISRInfo; ///< typedef struct ISRInfo ISRInfo;


/* Global Memory  -----------------------------------------------------------*/
/* External Memory-----------------------------------------------------------*/
/* Function Prototypes ------------------------------------------------------*/

void ISR_Init();

void ISR_Timer(void *ptr);
void ISR_Serial();
void ISR_Wireless();
void ISR_USB();
void ISR_GPIO();

void ISR_HandleAll();
void ISR_Handler(ISRInfo *info);

#endif
